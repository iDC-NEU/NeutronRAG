7月28日
场景：100个用户集中在一个时间同时大量请求

多用户的数据管理与隔离（沛铮，沈航）
实现不同用户请求、数据之间的安全隔离；
保障每个用户仅能访问和操作自己所属的数据

用户历史对话表设计与限制：
- 每个用户最多可保存 5 张历史对话表；（用一个table去保存每个用户的表数）
- 每张表用于记录一次 RAG 测试过程；
- 预计总表量为：100 用户 × 3 模型 × 5 表 = 1500 张表；
- 每张表结构需支持：原始问题、检索内容、模型回答、评分等字段；

按用户隔离表访问权限：
- 对每张表绑定所属 user_id；
- 查询与写入逻辑必须强制校验 session['user_id']；
- 确保用户仅能查看和修改自己的表。
前端页面用户态渲染逻辑：
- 登录态下动态渲染用户所拥有的表；
- 限制表数量（超过5张需提示或覆盖）；
- 分页展示或标签页切换历史记录。

请求队列机制（沛铮，欣博，沈航）

替换检索方式：三元组 → 向量检索（沈航）：
- 使用 Milvus实现基于向量的检索方式；
- 支持批量 top-k 检索，集成入 retrieval_queue 阶段。
把检索三元组换成向量检索

Request 类设计 （仿照sglang的属性定义等，不过需要加入rag的一些监控值）

Schedular 类设计  三 Quene  一个收集和存储来的request和正在处理的查询的request    一个存完成查询要发给远程LLM的request，       一个远程返回的

并行检索与生成机制：
- 设置最大并行度（如每批次处理 30 个请求）；
- 向向量库并行发出检索请求，汇总后一次性调用大模型 API（如本地 LLM 或远程服务）；
- 同时将生成结果异步写入用户专属的历史表中。

结果回写与页面推送：
- 每个生成结果写入对应用户的表中；
- 页面端定时轮询 / WebSocket 推送最新生成记录，实现“个人页面实时刷新”。

本地部署脚本（佳霓）
- 提供Chunk和三元组
- 提供nebulagraph和Milvus，mysql原始部署脚本
- 一键部署脚本，nebulagraph，Milvus，mysql

[图片]
暂时无法在飞书文档外展示此内容

沈航 todo_list（8月4日之前）:
1. 在node1的 ragdemo-mysql 中建立一个 table-num 的表， 然后修改注册和加添加对话历史的功能，添加删除历史的选项   （在添加和删除时 把读文件改为操作数据库）
2. 完成mysql存储用户对话历史的功能， 在新建的表 （Vector， Graph， Hybrid）上创建Schema （在相应的Json文件中） 用户返回时需要写入
3. 修改所对应的读文件的代码，改为根据 Session['username']查询Mysql


沛铮 todo_list（8月1日之前）
1. Request 类 和Schedular类的设计
2. Graph检索代码改为向量检索，跑通
3. 前端JS代码辅助沈航修改，以及mysql用户操作
4. 后端 辅助欣博并发查询的搭建

欣博 todo_list（8月4日前）
我在backend中新建了一个experiment目录 里面有一个 ollama_test.py用Rgb数据集去模拟真实场景下不同用户请求频率到来。
1. 根据到来的query_list，用后端的接口以及封装的schedular 去完成一个简单的查询和生成的流程
2. 返回的结果写入用户的history_table
3.      切换不同的请求频率做一个压力测试

佳霓todo_list（8月10日前）
希望朝亿哥提供一下每个数据集的语料和三元组文件
1. 在node3或是一个新的阿里云服务器上，完成 mysql，Milvus，nebulagraph的部署
2. 对于每个数据集Chunk和三元组，构建 图数据库space和Milvus表
3. 将部署与构建知识库的流程写成一个一键部署脚本 .py
4. 更新Readme





李沛铮7月31日 的 修改和进度


- 在路径NeutronRAG/backend/database/mysql/mysql.py 加入了关系数据库管理类， 里面封装了增删改查的一些代码，大家用的时候可以看一下

- 前端目前完成了登录，和在数据库中检索内容的读取和渲染（多用户模式） demo.js后面两个方法

- 后端在NeutronRAG/backend/schedule完成了调度器（Schedular）我英文可能打错了😀和请求（Request）的封装

- 在NeutronRAG/backend/experiment/backend_experiment.py 中完成了在rgb在真实场景下整个流程的调度（包括检索）


目前差的点

- 目前前端的demo.js 和app.py中有一些冗余代码（之前单用户模式下写的） 然后mysql chat  数据库下有一些冗余的表 （沈航可以看一下，能删除的尽量删除）
- 然后用户点击 添加和删除表的交互写一下（沈航）

- 调度器与前端 app.py接收的真实调度和函数的重写（欣博）